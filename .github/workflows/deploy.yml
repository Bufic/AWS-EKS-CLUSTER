name: Deploy to EKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push backend Docker image
        run: |
          docker build -t bufic/dream-vacation-app:backendv1 -f Dream-Vacation-App-main/backend/Dockerfile Dream-Vacation-App-main/backend
          docker push bufic/dream-vacation-app:backendv1

      - name: Build and push frontend Docker image
        run: |
          docker build -t bufic/dream-vacation-app:frontendv1 -f Dream-Vacation-App-main/frontend/Dockerfile Dream-Vacation-App-main/frontend
          docker push bufic/dream-vacation-app:frontendv1

# name: Deploy to EKS

# on:
#   push:
#     branches:
#       - main # Runs when pushing to the main branch

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0 # Ensure we fetch all history for tags

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Docker Hub
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#       - name: Determine next semantic version
#         id: versioning
#         run: |
#           # Get the latest tag (fallback to v1.0.0 if no tag exists)
#           LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")

#           # Extract the major, minor, and patch numbers
#           MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | sed 's/v//')
#           MINOR=$(echo $LATEST_TAG | cut -d. -f2)
#           PATCH=$(echo $LATEST_TAG | cut -d. -f3)

#           # Auto-increment the PATCH version by default
#           NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"

#           # Set the new version as an environment variable
#           echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

#       - name: Build and push backend Docker image
#         run: |
#           docker build -t bufic/dream-vacation-app-backend:${{ env.NEW_VERSION }} -t bufic/dream-vacation-app-backend:latest -f Dream-Vacation-App-main/backend/Dockerfile Dream-Vacation-App-main/backend
#           docker push bufic/dream-vacation-app-backend:${{ env.NEW_VERSION }}
#           docker push bufic/dream-vacation-app-backend:latest

#       - name: Build and push frontend Docker image
#         run: |
#           docker build -t bufic/dream-vacation-app-frontend:${{ env.NEW_VERSION }} -t bufic/dream-vacation-app-frontend:latest -f Dream-Vacation-App-main/frontend/Dockerfile Dream-Vacation-App-main/frontend
#           docker push bufic/dream-vacation-app-frontend:${{ env.NEW_VERSION }}
#           docker push bufic/dream-vacation-app-frontend:latest

#       - name: Create and push Git tag Versioning
#         env:
#           GH_PAT: ${{ secrets.GH_PAT }}
#         run: |
#           git tag v1.0.${{ github.run_number }}
#           git remote set-url origin https://Bufic:${{ secrets.GH_PAT }}@github.com/Bufic/AWS-EKS-CLUSTER.git
#           git push origin v1.0.${{ github.run_number }}
